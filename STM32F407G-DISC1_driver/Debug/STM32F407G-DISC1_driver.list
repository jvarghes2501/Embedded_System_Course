
STM32F407G-DISC1_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000948  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ad0  08000ad0  00001ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  00001aec  2**0
                  CONTENTS
  4 .ARM          00000008  08000adc  08000adc  00001adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ae4  08000aec  00001aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00001ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00001ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001aec  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001073  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038f  00000000  00000000  00002b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00002f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020c8  00000000  00000000  000030ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016f8  00000000  00000000  000051b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000090fb  00000000  00000000  000068ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000f9a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000340  00000000  00000000  0000f9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0000fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ab8 	.word	0x08000ab8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ab8 	.word	0x08000ab8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI_GPIOInit>:
 * PB15: SPI2_MOSI
 * PB13: SPI2_SCLK
 * PB12: SPI2_NSS
 * ALT function mode = 5
 */
void SPI_GPIOInit(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <SPI_GPIOInit+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode =5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPull_up_down_control = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f96d 	bl	80004dc <GPIO_Init>

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f967 	bl	80004dc <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f961 	bl	80004dc <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800021a:	230f      	movs	r3, #15
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f95b 	bl	80004dc <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI_Inits>:
void SPI_Inits(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI_Inits+0x38>)
 800023c:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig= SPI_BUS_CONFIG_FULL_DUP;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //8MHz clock
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // enables software slave management, grounds pin internally
 8000256:	2301      	movs	r3, #1
 8000258:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2Handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb4d 	bl	80008fc <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <main>:
int main(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	char transmit_data[] = "Hello world";
 8000276:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <main+0x40>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//initialize GPIO pins to behave as SPI2 pins
	SPI_GPIOInit();
 8000280:	f7ff ffaa 	bl	80001d8 <SPI_GPIOInit>
	// initialize SPI pin config
	SPI_Inits();
 8000284:	f7ff ffd6 	bl	8000234 <SPI_Inits>
	//enable SSI to make NSS signal internally high and avoid MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 8000288:	2101      	movs	r1, #1
 800028a:	480a      	ldr	r0, [pc, #40]	@ (80002b4 <main+0x44>)
 800028c:	f000 fba2 	bl	80009d4 <SPI_SSIConfig>
	// enable the SPi2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	4808      	ldr	r0, [pc, #32]	@ (80002b4 <main+0x44>)
 8000294:	f000 fb82 	bl	800099c <SPI_PeripheralControl>
	SPI_SendData(SPI2, (uint8_t*)transmit_data, strlen(transmit_data));
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff94 	bl	80001c8 <strlen>
 80002a0:	4602      	mov	r2, r0
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <main+0x44>)
 80002a8:	f000 fbb0 	bl	8000a0c <SPI_SendData>
	while(1);
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <main+0x3c>
 80002b0:	08000ad0 	.word	0x08000ad0
 80002b4:	40003800 	.word	0x40003800

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fbc3 	bl	8000a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ffc1 	bl	8000270 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000aec 	.word	0x08000aec
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <GPIO_ClockControl>:
 *  Created on: Apr 17, 2025
 *      Author: jesti
 */
# include "stm32f407xx_gpio_driver.h"

void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t Enable_or_disable){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
	if (Enable_or_disable==ENABLE){
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d162      	bne.n	80003e4 <GPIO_ClockControl+0xd8>
		if (pGPIOx == GPIOA){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a64      	ldr	r2, [pc, #400]	@ (80004b4 <GPIO_ClockControl+0x1a8>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_ClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 8000326:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a63      	ldr	r2, [pc, #396]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI){
			GPIOI_CLOCK_DISABLE();
		}

	}
}
 8000332:	e0b9      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOB){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a61      	ldr	r2, [pc, #388]	@ (80004bc <GPIO_ClockControl+0x1b0>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_ClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a5d      	ldr	r2, [pc, #372]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	e0ae      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOC){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a5c      	ldr	r2, [pc, #368]	@ (80004c0 <GPIO_ClockControl+0x1b4>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_ClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 8000352:	4b59      	ldr	r3, [pc, #356]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a58      	ldr	r2, [pc, #352]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035e:	e0a3      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOD){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a58      	ldr	r2, [pc, #352]	@ (80004c4 <GPIO_ClockControl+0x1b8>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_ClockControl+0x6a>
			GPIOD_CLOCK_ENABLE();
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a52      	ldr	r2, [pc, #328]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	e098      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOE){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a53      	ldr	r2, [pc, #332]	@ (80004c8 <GPIO_ClockControl+0x1bc>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_ClockControl+0x80>
			GPIOE_CLOCK_ENABLE();
 800037e:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a4d      	ldr	r2, [pc, #308]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038a:	e08d      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOF){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a4f      	ldr	r2, [pc, #316]	@ (80004cc <GPIO_ClockControl+0x1c0>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_ClockControl+0x96>
			GPIOF_CLOCK_ENABLE();
 8000394:	4b48      	ldr	r3, [pc, #288]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a47      	ldr	r2, [pc, #284]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a0:	e082      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOG){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a4a      	ldr	r2, [pc, #296]	@ (80004d0 <GPIO_ClockControl+0x1c4>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_ClockControl+0xac>
			GPIOG_CLOCK_ENABLE();
 80003aa:	4b43      	ldr	r3, [pc, #268]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ae:	4a42      	ldr	r2, [pc, #264]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b6:	e077      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOH){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a46      	ldr	r2, [pc, #280]	@ (80004d4 <GPIO_ClockControl+0x1c8>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_ClockControl+0xc2>
			GPIOH_CLOCK_ENABLE();
 80003c0:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a3c      	ldr	r2, [pc, #240]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003cc:	e06c      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOI){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a41      	ldr	r2, [pc, #260]	@ (80004d8 <GPIO_ClockControl+0x1cc>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d168      	bne.n	80004a8 <GPIO_ClockControl+0x19c>
			GPIOI_CLOCK_ENABLE();
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a37      	ldr	r2, [pc, #220]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e2:	e061      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		if (pGPIOx == GPIOA){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a33      	ldr	r2, [pc, #204]	@ (80004b4 <GPIO_ClockControl+0x1a8>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_ClockControl+0xee>
			GPIOA_CLOCK_DISABLE();
 80003ec:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a31      	ldr	r2, [pc, #196]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f8:	e056      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOB){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a2f      	ldr	r2, [pc, #188]	@ (80004bc <GPIO_ClockControl+0x1b0>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_ClockControl+0x104>
			GPIOB_CLOCK_DISABLE();
 8000402:	4b2d      	ldr	r3, [pc, #180]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a2c      	ldr	r2, [pc, #176]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000408:	f023 0302 	bic.w	r3, r3, #2
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040e:	e04b      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOC){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <GPIO_ClockControl+0x1b4>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_ClockControl+0x11a>
			GPIOC_CLOCK_DISABLE();
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a26      	ldr	r2, [pc, #152]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800041e:	f023 0304 	bic.w	r3, r3, #4
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	e040      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOD){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a26      	ldr	r2, [pc, #152]	@ (80004c4 <GPIO_ClockControl+0x1b8>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_ClockControl+0x130>
			GPIOD_CLOCK_DISABLE();
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	4a21      	ldr	r2, [pc, #132]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000434:	f023 0308 	bic.w	r3, r3, #8
 8000438:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043a:	e035      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOE){
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a22      	ldr	r2, [pc, #136]	@ (80004c8 <GPIO_ClockControl+0x1bc>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_ClockControl+0x146>
			GPIOE_CLOCK_DISABLE();
 8000444:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a1b      	ldr	r2, [pc, #108]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800044a:	f023 0310 	bic.w	r3, r3, #16
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000450:	e02a      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOF){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a1d      	ldr	r2, [pc, #116]	@ (80004cc <GPIO_ClockControl+0x1c0>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_ClockControl+0x15c>
			GPIOF_CLOCK_DISABLE();
 800045a:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a16      	ldr	r2, [pc, #88]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000460:	f023 0320 	bic.w	r3, r3, #32
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000466:	e01f      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOG){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a19      	ldr	r2, [pc, #100]	@ (80004d0 <GPIO_ClockControl+0x1c4>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_ClockControl+0x172>
			GPIOG_CLOCK_DISABLE();
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047c:	e014      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOH){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a14      	ldr	r2, [pc, #80]	@ (80004d4 <GPIO_ClockControl+0x1c8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_ClockControl+0x188>
			GPIOH_CLOCK_DISABLE();
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4a0b      	ldr	r2, [pc, #44]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800048c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000490:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000492:	e009      	b.n	80004a8 <GPIO_ClockControl+0x19c>
		}else if (pGPIOx == GPIOI){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a10      	ldr	r2, [pc, #64]	@ (80004d8 <GPIO_ClockControl+0x1cc>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d105      	bne.n	80004a8 <GPIO_ClockControl+0x19c>
			GPIOI_CLOCK_DISABLE();
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <GPIO_ClockControl+0x1ac>)
 80004a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40020000 	.word	0x40020000
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40020400 	.word	0x40020400
 80004c0:	40020800 	.word	0x40020800
 80004c4:	40020c00 	.word	0x40020c00
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40021400 	.word	0x40021400
 80004d0:	40021800 	.word	0x40021800
 80004d4:	40021c00 	.word	0x40021c00
 80004d8:	40022000 	.word	0x40022000

080004dc <GPIO_Init>:

void GPIO_Init (GPIO_Handle_t * pGPIOHandle){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	// enable the clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2101      	movs	r1, #1
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff0e 	bl	800030c <GPIO_ClockControl>
	uint32_t temp=0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
	//1) configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d822      	bhi.n	8000542 <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &=~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bits
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	400a      	ands	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	e0cb      	b.n	80006da <GPIO_Init+0x1fe>
	}
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INTPT_FALLING_TRIG){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d117      	bne.n	800057a <GPIO_Init+0x9e>
			//1) configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b47      	ldr	r3, [pc, #284]	@ (8000668 <GPIO_Init+0x18c>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	4611      	mov	r1, r2
 800055a:	4a43      	ldr	r2, [pc, #268]	@ (8000668 <GPIO_Init+0x18c>)
 800055c:	430b      	orrs	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear the rising trigger bit
 8000560:	4b41      	ldr	r3, [pc, #260]	@ (8000668 <GPIO_Init+0x18c>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	43d2      	mvns	r2, r2
 8000570:	4611      	mov	r1, r2
 8000572:	4a3d      	ldr	r2, [pc, #244]	@ (8000668 <GPIO_Init+0x18c>)
 8000574:	400b      	ands	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
 8000578:	e035      	b.n	80005e6 <GPIO_Init+0x10a>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INTPT_RISING_TRIG)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d117      	bne.n	80005b2 <GPIO_Init+0xd6>
		{
			//2) configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <GPIO_Init+0x18c>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a35      	ldr	r2, [pc, #212]	@ (8000668 <GPIO_Init+0x18c>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear the falling trigger bit
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <GPIO_Init+0x18c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000668 <GPIO_Init+0x18c>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e019      	b.n	80005e6 <GPIO_Init+0x10a>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INTPT_RISING_FALLING_TRIG)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d115      	bne.n	80005e6 <GPIO_Init+0x10a>
		{
			// configure the FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <GPIO_Init+0x18c>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <GPIO_Init+0x18c>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <GPIO_Init+0x18c>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <GPIO_Init+0x18c>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
		}
		//2) configure the GPIO port selection and SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	73bb      	strb	r3, [r7, #14]
		uint8_t portCode;
		if (pGPIOHandle->pGPIOx == GPIOA){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <GPIO_Init+0x190>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d102      	bne.n	8000608 <GPIO_Init+0x12c>
			portCode = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	75fb      	strb	r3, [r7, #23]
 8000606:	e046      	b.n	8000696 <GPIO_Init+0x1ba>
		}else if (pGPIOHandle->pGPIOx == GPIOB){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <GPIO_Init+0x194>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d102      	bne.n	8000618 <GPIO_Init+0x13c>
			portCode = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	75fb      	strb	r3, [r7, #23]
 8000616:	e03e      	b.n	8000696 <GPIO_Init+0x1ba>
		}else if (pGPIOHandle->pGPIOx == GPIOC){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <GPIO_Init+0x198>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d102      	bne.n	8000628 <GPIO_Init+0x14c>
			portCode = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	75fb      	strb	r3, [r7, #23]
 8000626:	e036      	b.n	8000696 <GPIO_Init+0x1ba>
		}else if (pGPIOHandle->pGPIOx == GPIOD){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <GPIO_Init+0x19c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d102      	bne.n	8000638 <GPIO_Init+0x15c>
			portCode = 3;
 8000632:	2303      	movs	r3, #3
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	e02e      	b.n	8000696 <GPIO_Init+0x1ba>
		}else if (pGPIOHandle->pGPIOx == GPIOE){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <GPIO_Init+0x1a0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d102      	bne.n	8000648 <GPIO_Init+0x16c>
			portCode = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	e026      	b.n	8000696 <GPIO_Init+0x1ba>
		}else if (pGPIOHandle->pGPIOx == GPIOF){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0c      	ldr	r2, [pc, #48]	@ (8000680 <GPIO_Init+0x1a4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d102      	bne.n	8000658 <GPIO_Init+0x17c>
			portCode = 5;
 8000652:	2305      	movs	r3, #5
 8000654:	75fb      	strb	r3, [r7, #23]
 8000656:	e01e      	b.n	8000696 <GPIO_Init+0x1ba>
		}else if (pGPIOHandle->pGPIOx == GPIOG){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <GPIO_Init+0x1a8>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d112      	bne.n	8000688 <GPIO_Init+0x1ac>
			portCode = 6;
 8000662:	2306      	movs	r3, #6
 8000664:	75fb      	strb	r3, [r7, #23]
 8000666:	e016      	b.n	8000696 <GPIO_Init+0x1ba>
 8000668:	40013c00 	.word	0x40013c00
 800066c:	40020000 	.word	0x40020000
 8000670:	40020400 	.word	0x40020400
 8000674:	40020800 	.word	0x40020800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40021400 	.word	0x40021400
 8000684:	40021800 	.word	0x40021800
		}else if (pGPIOHandle->pGPIOx == GPIOH){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a6b      	ldr	r2, [pc, #428]	@ (800083c <GPIO_Init+0x360>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d101      	bne.n	8000696 <GPIO_Init+0x1ba>
			portCode = 7;
 8000692:	2307      	movs	r3, #7
 8000694:	75fb      	strb	r3, [r7, #23]
		}


		SYSCFG_CLOCK_ENABLE();
 8000696:	4b6a      	ldr	r3, [pc, #424]	@ (8000840 <GPIO_Init+0x364>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069a:	4a69      	ldr	r2, [pc, #420]	@ (8000840 <GPIO_Init+0x364>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (temp2 * 4);
 80006a2:	4a68      	ldr	r2, [pc, #416]	@ (8000844 <GPIO_Init+0x368>)
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	3302      	adds	r3, #2
 80006a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ac:	7df9      	ldrb	r1, [r7, #23]
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	4962      	ldr	r1, [pc, #392]	@ (8000844 <GPIO_Init+0x368>)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4302      	orrs	r2, r0
 80006be:	3302      	adds	r3, #2
 80006c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3) enable the EXTI interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006c4:	4b60      	ldr	r3, [pc, #384]	@ (8000848 <GPIO_Init+0x36c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7912      	ldrb	r2, [r2, #4]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a5c      	ldr	r2, [pc, #368]	@ (8000848 <GPIO_Init+0x36c>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6013      	str	r3, [r2, #0]
	}

	//2) configure the GPIO speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bits
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR|= temp;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6899      	ldr	r1, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	430a      	orrs	r2, r1
 8000718:	609a      	str	r2, [r3, #8]
	temp = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

	//3) configure the pull up and pull down pins
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPull_up_down_control<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	79db      	ldrb	r3, [r3, #7]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bits
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2103      	movs	r1, #3
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68d9      	ldr	r1, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]

	//4) configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &=~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing the bits
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	2301      	movs	r3, #1
 8000780:	408b      	lsls	r3, r1
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	430a      	orrs	r2, r1
 800079c:	605a      	str	r2, [r3, #4]

	//configure the alternative functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d146      	bne.n	8000834 <GPIO_Init+0x358>
	{
		//configure the alternate function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	737b      	strb	r3, [r7, #13]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	733b      	strb	r3, [r7, #12]

		if (temp1 == 0){
 80007b8:	7b7b      	ldrb	r3, [r7, #13]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d11d      	bne.n	80007fa <GPIO_Init+0x31e>
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4*temp2));  //clearing
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6a1a      	ldr	r2, [r3, #32]
 80007c4:	7b3b      	ldrb	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	210f      	movs	r1, #15
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	400a      	ands	r2, r1
 80007d8:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a1a      	ldr	r2, [r3, #32]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7a5b      	ldrb	r3, [r3, #9]
 80007e4:	4619      	mov	r1, r3
 80007e6:	7b3b      	ldrb	r3, [r7, #12]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4*temp2));  //clearing
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));

		}
	}
}
 80007f8:	e01c      	b.n	8000834 <GPIO_Init+0x358>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4*temp2));  //clearing
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000800:	7b3b      	ldrb	r3, [r7, #12]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	210f      	movs	r1, #15
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	400a      	ands	r2, r1
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a5b      	ldrb	r3, [r3, #9]
 8000820:	4619      	mov	r1, r3
 8000822:	7b3b      	ldrb	r3, [r7, #12]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	4619      	mov	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	430a      	orrs	r2, r1
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021c00 	.word	0x40021c00
 8000840:	40023800 	.word	0x40023800
 8000844:	40013800 	.word	0x40013800
 8000848:	40013c00 	.word	0x40013c00

0800084c <SPI_ClockControl>:
 *      Author: jesti
 */
# include "stm32f407xx_spi_driver.h"


void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t Enable_or_disable){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	if (Enable_or_disable==ENABLE){
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d120      	bne.n	80008a0 <SPI_ClockControl+0x54>
			if (pSPIx == SPI1){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a22      	ldr	r2, [pc, #136]	@ (80008ec <SPI_ClockControl+0xa0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <SPI_ClockControl+0x28>
				SPI1_CLOCK_ENABLE();
 8000866:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <SPI_ClockControl+0xa4>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <SPI_ClockControl+0xa4>)
 800086c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
			}else if (pSPIx == SPI3){
				SPI3_CLOCK_DISABLE();
			}
		}

}
 8000872:	e035      	b.n	80008e0 <SPI_ClockControl+0x94>
			}else if (pSPIx == SPI2){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <SPI_ClockControl+0xa8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <SPI_ClockControl+0x3e>
				SPI2_CLOCK_ENABLE();
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <SPI_ClockControl+0xa4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <SPI_ClockControl+0xa4>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000888:	e02a      	b.n	80008e0 <SPI_ClockControl+0x94>
			}else if (pSPIx == SPI3){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <SPI_ClockControl+0xac>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d126      	bne.n	80008e0 <SPI_ClockControl+0x94>
				SPI3_CLOCK_ENABLE();
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <SPI_ClockControl+0xa4>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <SPI_ClockControl+0xa4>)
 8000898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800089e:	e01f      	b.n	80008e0 <SPI_ClockControl+0x94>
			if (pSPIx == SPI1){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <SPI_ClockControl+0xa0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_ClockControl+0x6a>
				SPI1_CLOCK_DISABLE();
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <SPI_ClockControl+0xa4>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ac:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <SPI_ClockControl+0xa4>)
 80008ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008b2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008b4:	e014      	b.n	80008e0 <SPI_ClockControl+0x94>
			}else if (pSPIx == SPI2){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <SPI_ClockControl+0xa8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <SPI_ClockControl+0x80>
				SPI2_CLOCK_DISABLE();
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <SPI_ClockControl+0xa4>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <SPI_ClockControl+0xa4>)
 80008c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ca:	e009      	b.n	80008e0 <SPI_ClockControl+0x94>
			}else if (pSPIx == SPI3){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <SPI_ClockControl+0xac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <SPI_ClockControl+0x94>
				SPI3_CLOCK_DISABLE();
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SPI_ClockControl+0xa4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SPI_ClockControl+0xa4>)
 80008da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40003800 	.word	0x40003800
 80008f8:	40003c00 	.word	0x40003c00

080008fc <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	//enable the clock
	SPI_ClockControl(pSPIHandle->pSPIx, ENABLE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff9e 	bl	800084c <SPI_ClockControl>
	uint32_t temp_reg = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	//configure the device mode
	temp_reg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

	// configure the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUP){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d104      	bne.n	8000932 <SPI_Init+0x36>
		// bidi mode should be cleared
		temp_reg &= ~(1<<15);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e014      	b.n	800095c <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUP){
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d104      	bne.n	8000944 <SPI_Init+0x48>
		//bidi mode should be set
		temp_reg |= (1<<15);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e00b      	b.n	800095c <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	795b      	ldrb	r3, [r3, #5]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d107      	bne.n	800095c <SPI_Init+0x60>
	{
		// bidi mode should be cleared
		temp_reg &= ~(1<<15);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000952:	60fb      	str	r3, [r7, #12]
		//RX only bit must be set
		temp_reg |= (1<<10);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800095a:	60fb      	str	r3, [r7, #12]

	}

	// configure the spi serial clock speed
	temp_reg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	799b      	ldrb	r3, [r3, #6]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4313      	orrs	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
	//configure the DFF
	temp_reg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	79db      	ldrb	r3, [r3, #7]
 800096c:	02db      	lsls	r3, r3, #11
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
	//configure the CPOL
	temp_reg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a1b      	ldrb	r3, [r3, #8]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
	// configure the CPHA
	temp_reg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp_reg;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	601a      	str	r2, [r3, #0]



}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SPI_PeripheralControl>:
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Enable_or_disable){
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if(Enable_or_disable == ENABLE){
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d106      	bne.n	80009bc <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);

	}
}
 80009ba:	e005      	b.n	80009c8 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SPI_SSIConfig>:
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t Enable_or_disable){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	if(Enable_or_disable == ENABLE){
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d106      	bne.n	80009f4 <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SSI);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);

		}
}
 80009f2:	e005      	b.n	8000a00 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SPI_SendData>:
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t bufferSize){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	while (bufferSize > 0){
 8000a18:	e020      	b.n	8000a5c <SPI_SendData+0x50>
		// wait till TXE is set
		while (!(pSPIx->SR & (1<<1)));
 8000a1a:	bf00      	nop
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <SPI_SendData+0x10>

		// check the DFF in CR1
		if((pSPIx->CR1 &(1<<SPI_CR1_DFF))){
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <SPI_SendData+0x40>
			//16 bit DFF
			// load the data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60da      	str	r2, [r3, #12]
			bufferSize--;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
			bufferSize--;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e007      	b.n	8000a5c <SPI_SendData+0x50>
			(uint16_t*)pTxBuffer;
		}
		else{
			//8 bit DFF
			pSPIx->DR = *(pTxBuffer);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	60da      	str	r2, [r3, #12]
			bufferSize--;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
	while (bufferSize > 0){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1db      	bne.n	8000a1a <SPI_SendData+0xe>
			pTxBuffer;
		}
	}
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <__libc_init_array>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	4d0d      	ldr	r5, [pc, #52]	@ (8000aa8 <__libc_init_array+0x38>)
 8000a74:	4c0d      	ldr	r4, [pc, #52]	@ (8000aac <__libc_init_array+0x3c>)
 8000a76:	1b64      	subs	r4, r4, r5
 8000a78:	10a4      	asrs	r4, r4, #2
 8000a7a:	2600      	movs	r6, #0
 8000a7c:	42a6      	cmp	r6, r4
 8000a7e:	d109      	bne.n	8000a94 <__libc_init_array+0x24>
 8000a80:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab0 <__libc_init_array+0x40>)
 8000a82:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab4 <__libc_init_array+0x44>)
 8000a84:	f000 f818 	bl	8000ab8 <_init>
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	10a4      	asrs	r4, r4, #2
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	42a6      	cmp	r6, r4
 8000a90:	d105      	bne.n	8000a9e <__libc_init_array+0x2e>
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a98:	4798      	blx	r3
 8000a9a:	3601      	adds	r6, #1
 8000a9c:	e7ee      	b.n	8000a7c <__libc_init_array+0xc>
 8000a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa2:	4798      	blx	r3
 8000aa4:	3601      	adds	r6, #1
 8000aa6:	e7f2      	b.n	8000a8e <__libc_init_array+0x1e>
 8000aa8:	08000ae4 	.word	0x08000ae4
 8000aac:	08000ae4 	.word	0x08000ae4
 8000ab0:	08000ae4 	.word	0x08000ae4
 8000ab4:	08000ae8 	.word	0x08000ae8

08000ab8 <_init>:
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	bf00      	nop
 8000abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000abe:	bc08      	pop	{r3}
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	4770      	bx	lr

08000ac4 <_fini>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr
