/*
 * spi_driver.c
 *
 *  Created on: May 10, 2025
 *      Author: jesti
 */
# include "stm32f407xx_spi_driver.h"


void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t Enable_or_disable){
	if (Enable_or_disable==ENABLE){
			if (pSPIx == SPI1){
				SPI1_CLOCK_ENABLE();
			}else if (pSPIx == SPI2){
				SPI2_CLOCK_ENABLE();
			}else if (pSPIx == SPI3){
				SPI3_CLOCK_ENABLE();
			}
		}else{
			if (pSPIx == SPI1){
				SPI1_CLOCK_DISABLE();
			}else if (pSPIx == SPI2){
				SPI2_CLOCK_DISABLE();
			}else if (pSPIx == SPI3){
				SPI3_CLOCK_DISABLE();
			}
		}

}

void SPI_Init(SPI_Handle_t *pSPIHandle){

	//enable the clock
	SPI_ClockControl(pSPIHandle->pSPIx, ENABLE);
	uint32_t temp_reg = 0;
	//configure the device mode
	temp_reg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;

	// configure the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUP){
		// bidi mode should be cleared
		temp_reg &= ~(1<<15);
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUP){
		//bidi mode should be set
		temp_reg |= (1<<15);
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		// bidi mode should be cleared
		temp_reg &= ~(1<<15);
		//RX only bit must be set
		temp_reg |= (1<<10);

	}

	// configure the spi serial clock speed
	temp_reg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
	//configure the DFF
	temp_reg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
	//configure the CPOL
	temp_reg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
	// configure the CPHA
	temp_reg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;

	pSPIHandle->pSPIx->CR1 = temp_reg;



}
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Enable_or_disable){
	if(Enable_or_disable == ENABLE){
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
	}else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);

	}
}
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t Enable_or_disable){
	if(Enable_or_disable == ENABLE){
		pSPIx->CR1 |= (1<<SPI_CR1_SSI);
	}else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);

		}
}
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t bufferSize){
	while (bufferSize > 0){
		// wait till TXE is set
		while (!(pSPIx->SR & (1<<1)));

		// check the DFF in CR1
		if((pSPIx->CR1 &(1<<SPI_CR1_DFF))){
			//16 bit DFF
			// load the data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
			bufferSize--;
			bufferSize--;
			(uint16_t*)pTxBuffer++;
		}
		else{
			//8 bit DFF
			pSPIx->DR = *(pTxBuffer);
			bufferSize--;
			pTxBuffer++;
		}
	}
}
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t bufferSize){
	while (bufferSize > 0){
		// wait till RXNE is set
		while (!(pSPIx->SR & (1<<0)));

		// check the DFF in CR1
		if((pSPIx->CR1 &(1<<SPI_CR1_DFF))){
			//16 bit DFF
			// load the data from DR to rxbuffer address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
			bufferSize--;
			bufferSize--;
			(uint16_t*)pRxBuffer++;
		}
		else{
			//8 bit DFF
			*(pTxBuffer) = pSPIx->DR;
			bufferSize--;
			pTxBuffer;
		}
	}

}
