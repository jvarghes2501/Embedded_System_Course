/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Apr 17, 2025
 *      Author: jesti
 */
# include "stm32f407xx_gpio_driver.h"

void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t Enable_or_disable){
	if (Enable_or_disable==ENABLE){
		if (pGPIOx == GPIOA){
			GPIOA_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOB){
			GPIOB_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOC){
			GPIOC_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOD){
			GPIOD_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOE){
			GPIOE_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOF){
			GPIOF_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOG){
			GPIOG_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLOCK_ENABLE();
		}else if (pGPIOx == GPIOI){
			GPIOI_CLOCK_ENABLE();
		}
	}else{
		if (pGPIOx == GPIOA){
			GPIOA_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOB){
			GPIOB_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOC){
			GPIOC_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOD){
			GPIOD_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOE){
			GPIOE_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOF){
			GPIOF_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOG){
			GPIOG_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOI){
			GPIOI_CLOCK_DISABLE();
		}

	}
}

void GPIO_Init (GPIO_Handle_t * pGPIOHandle){
	uint32_t temp=0;
	//1) configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2**pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &=~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bits
		pGPIOHandle->pGPIOx->MODER |= temp;
		temp = 0;
	}
	else{

	}

	//2) configure the GPIO speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2**pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bits
	pGPIOHandle->pGPIOx->OSPEEDR|= temp;
	temp = 0;

	//3) configure the pull up and pull down pins
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPull_up_down_control<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the bits
	pGPIOHandle->pGPIOx->PUPDR |= temp;
	temp = 0;

	//4) configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OTYPER &=~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing the bits
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	//configure the alternative functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
	{
		//configure the alternate function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;

		if (temp1 == 0){
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4*temp2));  //clearing
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
		}
		else {
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4*temp2));  //clearing
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));

		}
	}
}

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){
	if (pGPIOx == GPIOA){
		GPIOA_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOB){
		GPIOB_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOC){
		GPIOC_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOD){
		GPIOD_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOE){
		GPIOE_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOF){
		GPIOF_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOG){
		GPIOG_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOH){
		GPIOH_CLOCK_ENABLE();
	}else if (pGPIOx == GPIOI){
		GPIOI_CLOCK_ENABLE();
	}
}
