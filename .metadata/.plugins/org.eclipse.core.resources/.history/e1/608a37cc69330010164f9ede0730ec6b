/*
 * stm32f407xx_i2c_driver.h
 *
 *  Created on: May 17, 2025
 *      Author: jesti
 */
#include "stm32f407xx.h"
#ifndef INC_STM32F407XX_I2C_DRIVER_H_
#define INC_STM32F407XX_I2C_DRIVER_H_

typedef struct {
	uint32_t I2C_SCLSpeed;
	uint8_t I2C_DeviceAddress;
	uint8_t	I2C_ACKControl;
	uint16_t I2C_FMDutyCycle;
}I2C_Config_t;

typedef struct{
	I2C_RegDef_t *pI2Cx;
	I2C_Config_t I2C_Config;
}I2C_Handle_t;

// I2C clock speed
#define I2C_SCL_SPEED_SM	100000
#define I2C_SCL_SPEED_FM	400000

// I2C ack control
#define I2C_ACK_ENABLE		1
#define I2C_ACK_DISABLE		0

//I2C duty cycle
#define I2C_FM_DUTY_2		0
#define I2C_FM_DUTY_16_9	1

// I2C intialization and deinitialization functions
void I2C_Init(I2C_Handle_t *pI2CHandle);
void I2C_DiInit(I2C_RegDef_t *pI2Cx);
//SPI clock enable function:
void I2C_ClockControl(I2C_RegDef_t *pI2Cx, uint8_t Enable_or_disable);

//Data send and receive functions:

//I2C priority interrupt handling
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t Enable_or_disable);
void I2C_PriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority);

//peripheral control APIs
void SPI_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t Enable_or_disable);
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName);
//application call back
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv);

#endif /* INC_STM32F407XX_I2C_DRIVER_H_ */
